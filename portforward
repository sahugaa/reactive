import io.kubernetes.client.openapi.ApiClient;
import io.kubernetes.client.openapi.Configuration;
import io.kubernetes.client.util.Config;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.WebSocket;
import okhttp3.WebSocketListener;
import okhttp3.Response;

import java.io.IOException;

public class KubernetesPortForward {
    public static void main(String[] args) throws Exception {
        // Extract the token from the kubeconfig file
        String token = getTokenFromKubeconfig();
        
        // Load the Kubernetes client configuration
        ApiClient client = Config.defaultClient();
        Configuration.setDefaultApiClient(client);

        // Set up the OkHttpClient with the token
        OkHttpClient okHttpClient = client.getHttpClient().newBuilder()
            .authenticator((route, response) -> response.request().newBuilder()
                .header("Authorization", "Bearer " + token)
                .build())
            .build();

        // Define the namespace, pod name, and ports
        String namespace = "default";
        String podName = "your-pod-name";  // Replace with your pod name
        int localPort = 8080;
        int remotePort = 8080;
        String url = String.format("%s/api/v1/namespaces/%s/pods/%s/portforward?ports=%d", client.getBasePath(), namespace, podName, remotePort);

        // Create a WebSocket request
        Request request = new Request.Builder()
            .url(url)
            .build();

        // Implement a WebSocket listener
        WebSocketListener listener = new WebSocketListener() {
            @Override
            public void onOpen(WebSocket webSocket, Response response) {
                System.out.println("WebSocket opened");
            }

            @Override
            public void onMessage(WebSocket webSocket, String text) {
                System.out.println("Received message: " + text);
            }

            @Override
            public void onClosing(WebSocket webSocket, int code, String reason) {
                System.out.println("WebSocket closing: " + reason);
                webSocket.close(1000, null);
            }

            @Override
            public void onFailure(WebSocket webSocket, Throwable t, Response response) {
                t.printStackTrace();
            }
        };

        // Establish the WebSocket connection
        WebSocket webSocket = okHttpClient.newWebSocket(request, listener);

        // Keep the WebSocket connection open
        System.in.read();
        webSocket.close(1000, "Goodbye");
        okHttpClient.dispatcher().executorService().shutdown();
    }

    private static String getTokenFromKubeconfig() throws IOException {
        // Load the Kubernetes client configuration from the default location
        ApiClient client = Config.defaultClient();
        Configuration.setDefaultApiClient(client);

        // Extract the token from the kubeconfig file
        String token = client.getAuthentication().getCredentials().getPassword();
        
        // If the token is null, fallback to extracting it manually
        if (token == null) {
            String kubeconfig = System.getenv("KUBECONFIG");
            if (kubeconfig == null) {
                kubeconfig = System.getProperty("user.home") + "/.kube/config";
            }
            // Use a YAML parser to extract the token from the kubeconfig file
            // Example: Use SnakeYAML or another library to parse the YAML
            // You would add your parsing logic here if needed
        }

        return token;
    }
}
