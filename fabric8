import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;
import io.fabric8.kubernetes.api.model.networking.v1.NetworkPolicy;
import io.fabric8.kubernetes.api.model.networking.v1.NetworkPolicyBuilder;
import io.fabric8.kubernetes.api.model.networking.v1.NetworkPolicySpecBuilder;
import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClientBuilder;
import io.fabric8.kubernetes.client.KubernetesClientException;

public class CreateNetworkPolicy {
    public static void main(String[] args) {
        try (KubernetesClient client = new KubernetesClientBuilder().build()) {
            String namespace = "default";
            String networkPolicyName = "example-network-policy";

            // Define the Network Policy
            NetworkPolicy networkPolicy = new NetworkPolicyBuilder()
                .withMetadata(new ObjectMetaBuilder().withName(networkPolicyName).build())
                .withSpec(new NetworkPolicySpecBuilder()
                    .withPodSelector(new LabelSelectorBuilder().addToMatchLabels("app", "example").build())
                    .addToPolicyTypes("Ingress", "Egress")
                    .addNewIngress()
                        .addNewFrom()
                            .withPodSelector(new LabelSelectorBuilder().addToMatchLabels("app", "source-app").build())
                        .endFrom()
                        .addNewPort()
                            .withProtocol("TCP")
                            .withPort(80)
                        .endPort()
                    .endIngress()
                    .addNewEgress()
                        .addNewTo()
                            .withPodSelector(new LabelSelectorBuilder().addToMatchLabels("app", "destination-app").build())
                        .endTo()
                        .addNewPort()
                            .withProtocol("TCP")
                            .withPort(80)
                        .endPort()
                    .endEgress()
                    .build())
                .build();

            // Create the Network Policy
            client.network().v1().networkPolicies().inNamespace(namespace).createOrReplace(networkPolicy);
            System.out.println("Network Policy created successfully.");
        } catch (KubernetesClientException e) {
            System.err.println("Error creating Network Policy: " + e.getMessage());
        }
    }
}
