import io.fabric8.kubernetes.client.server.mock.KubernetesServer;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.api.model.apps.Deployment;
import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;
import org.junit.Before;
import org.junit.After;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.junit.Assert.*;

public class KubernetesServiceTest {

    private static final Logger logger = LoggerFactory.getLogger(KubernetesServiceTest.class);
    public KubernetesServer server = new KubernetesServer();
    private KubernetesClient client;
    private KubernetesService kubernetesService;

    @Before
    public void setUp() {
        client = server.getClient();
        kubernetesService = new KubernetesService(client);
    }

    @After
    public void tearDown() {
        server.after();
    }

    @Test
    public void testWatchDeployments() {
        Deployment deployment = new DeploymentBuilder()
                .withNewMetadata()
                .withName("test-deployment")
                .endMetadata()
                .withNewSpec()
                .endSpec()
                .withNewStatus()
                .endStatus()
                .build();

        server.expect().withPath("/apis/apps/v1/namespaces/default/deployments").andReturn(200, deployment).always();

        // Start watching deployments
        kubernetesService.watchDeployments();

        // Simulate deployment creation event
        client.apps().deployments().inNamespace("default").create(deployment);

        // Verify that the deployment was created
        Deployment createdDeployment = client.apps().deployments().inNamespace("default").withName("test-deployment").get();
        assertNotNull(createdDeployment);
        assertEquals("test-deployment", createdDeployment.getMetadata().getName());
    }
}
