     // Delete the deployment
            Boolean deleted = client.apps().deployments().inNamespace(namespace).withName(deploymentName).delete();

            if (deleted) {
                System.out.println("Deployment " + deploymentName + " deleted successfully.");
            } else {
                System.out.println("Deployment " + deploymentName + " not found or failed to delete.");
            }
        } catch (KubernetesClientException e) {
            System.err.println("Error deleting deployment: " + e.getMessage());
        }


            Boolean serviceDeleted = client.services().inNamespace(namespace).withName(serviceName).delete();

            Boolean deleted = client.network().v1().networkPolicies().inNamespace(namespace).withName(networkPolicyName).delete();




import io.fabric8.kubernetes.api.model.Service;
import io.fabric8.kubernetes.api.model.ServiceBuilder;
import io.fabric8.kubernetes.api.model.apps.Deployment;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClientBuilder;
import io.fabric8.kubernetes.client.KubernetesClientException;
import io.fabric8.kubernetes.client.Watcher;
import io.fabric8.kubernetes.client.Watcher.Action;
import io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable;

public class WatchDeploymentAndCreateService {
    public static void main(String[] args) {
        try (KubernetesClient client = new KubernetesClientBuilder().build()) {
            String namespace = "default";
            String deploymentName = "example-deployment";
            String serviceName = "example-service";

            // Define the service
            Service service = new ServiceBuilder()
                .withNewMetadata()
                    .withName(serviceName)
                    .addToLabels("app", "example")
                .endMetadata()
                .withNewSpec()
                    .withSelector(Collections.singletonMap("app", "example"))
                    .addNewPort()
                        .withProtocol("TCP")
                        .withPort(80)
                        .withTargetPort(new IntOrString(80))
                    .endPort()
                .endSpec()
                .build();

            // Watch the deployment
            FilterWatchListDeletable<Deployment, DeploymentList, Boolean, Watcher<Deployment>> watch = 
                client.apps().deployments().inNamespace(namespace).withName(deploymentName).watch(new Watcher<Deployment>() {
                @Override
                public void eventReceived(Action action, Deployment resource) {
                    if (action == Action.MODIFIED) {
                        if (resource.getStatus().getReplicas().equals(resource.getStatus().getAvailableReplicas())) {
                            // Deployment is ready, create the service
                            client.services().inNamespace(namespace).createOrReplace(service);
                            System.out.println("Service created successfully.");
                            // Close the watcher after service creation
                            close();
                        }
                    }
                }

                @Override
                public void onClose(KubernetesClientException cause) {
                    if (cause != null) {
                        System.err.println("Watcher closed due to an error: " + cause.getMessage());
                    } else {
                        System.out.println("Watcher closed.");
                    }
                }

                private void close() {
                    try {
                        client.close();
                    } catch (Exception e) {
                        System.err.println("Error closing Kubernetes client: " + e.getMessage());
                    }
                }
            });

            // Keep the main thread alive to allow the watcher to do its work
            Thread.sleep(300000); // 5 minutes
            watch.close();

        } catch (KubernetesClientException | InterruptedException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
}




NetworkPolicy networkPolicy = new NetworkPolicyBuilder()
                .withNewMetadata()
                    .withName(networkPolicyName)
                .endMetadata()
                .withNewSpec()
                    .withPodSelector(new LabelSelectorBuilder().addToMatchLabels("app", "example").build())
                    .addToPolicyTypes("Ingress", "Egress")
                    .addNewIngress()
                        .addNewFrom()
                            .withNewPodSelector()
                                .addToMatchLabels("app", "source-app")
                            .endPodSelector()
                        .endFrom()
                        .addNewPort()
                            .withProtocol("TCP")
                            .withPort(80)
                        .endPort()
                    .endIngress()
                    .addNewEgress()
                        .addNewTo()
                            .withNewPodSelector()
                                .addToMatchLabels("app", "destination-app")
                            .endPodSelector()
                        .endTo()
                        .addNewPort()
                            .withProtocol("TCP")
                            .withPort(80)
                        .endPort()
                    .endEgress()
                .endSpec()
                .build();

network policy
 // Define the Network Policy
            NetworkPolicy networkPolicy = new NetworkPolicyBuilder()
                .withNewMetadata()
                    .withName(networkPolicyName)
                .endMetadata()
                .withNewSpec()
                    .addNewIngress()
                        .addNewFrom()
                            .withNewPodSelector()
                                .addToMatchLabels("app", "source-app")
                            .endPodSelector()
                        .endFrom()
                        .addNewPort()
                            .withProtocol("TCP")
                            .withPort(80)
                        .endPort()
                    .endIngress()
                    .addNewEgress()
                        .addNewTo()
                            .withNewPodSelector()
                                .addToMatchLabels("app", "destination-app")
                            .endPodSelector()
                        .endTo()
                        .addNewPort()
                            .withProtocol("TCP")
                            .withPort(80)
                        .endPort()
                    .endEgress()
                    .withPodSelector(new LabelSelectorBuilder().addToMatchLabels("app", "example").build())
                    .addToPolicyTypes("Ingress", "Egress")
                .endSpec()
                .build();

            // Create the Network Policy
            client.network().v1().networkPolicies().inNamespace(namespace).createOrReplace(networkPolicy);
