

Let's consider a scenario where a team needs to build an efficient ingestion system with an expected NFR and SLA of 99.99% (handling 5 million requests/day, with batching triggered at 3-hour intervals), requiring maximum throughput and high availability. If this system has to be deployed in AWS, how do we determine the number of compute instances needed, as well as the optimal CPU cores, memory, network bandwidth, storage, and disk I/O to support the anticipated workload? Taking a ballpark figure isn't enough; it requires multiple iterations for review. Once deployed, we may find that we've overprovisioned, underprovisioned, or come close to the optimal configuration.We want to bridge the gap by validating against industry-accepted, battle-tested estimated numbers.



Malicious Processes: Detection of processes that are known to be malicious or that behave in ways typical of malware, such as hiding their presence or spying on other processes.
Unusual or Hidden Processes: Identification of processes that are not typically part of the system's operations or that have been deliberately hidden from the operating system to evade detection.
Network Connections: Analysis of active network connections and sockets that may reveal unauthorized external connections or data exfiltration attempts.
Rootkits and Stealth Malware: Discovery of signs of rootkits or other types of stealth malware that reside entirely in memory and are designed to manipulate running operating system functions while avoiding traditional disk-based detection.
Injection Artifacts: Detection of code injection in process memory spaces, a common technique used by malware to execute malicious code within the context of legitimate processes.
Anomaly in Login Sessions: Identification of anomaly sessions, such as remote logins at unusual hours, which could suggest unauthorized access.
Registry Keys and CLI Commands: Retrieval of recent command-line inputs and temporary registry modifications that may be indicators of command control activities or system configuration tampering



Teams heavily rely on costly commercial tools that utilize the extended Berkeley Packet Filter (eBPF) to monitor container activities, including detecting unusual behaviors such as unexpected processes and anomalous network traffic. This dependency not only results in high operational costs but also enforces vendor lock-in, limiting flexibility. Furthermore, the opaque nature of these tools restricts transparency, complicating security audits and the customization needed to address specific threats effectively.
Suspicious activity in the context of system and network security typically refers to actions or behaviors that could indicate a security threat or breach. When monitoring cloud container nodes, suspicious activity can manifest in various ways, depending on the nature of the threat. Here are some common types of suspicious activities that might be detected through volatile memory analysis and other monitoring techniques:

Unexpected Processes: Processes running on a node that are not part of the standard operating environment or that have been flagged as potentially malicious.
Unusual Network Traffic: Excessive or abnormal network requests, especially to known bad destinations or in unusual volumes, which could indicate data exfiltration or command and control communication.
Unauthorized Access Attempts: Repeated failed attempts to access the system or certain data, which could suggest a brute force attack.
Resource Anomalies: Significant, unexplained changes in resource usage, such as CPU, memory, or disk space, which could suggest a crypto-mining attack or a resource hijack.
File Integrity Issues: Changes to system or application files that were not part of an authorized update or maintenance activity.
Anomalous Application Behavior: Applications performing actions that are outside their normal operations, such as a web server trying to access system files.
Security Control Failures: Disabling or tampering with security controls, logging mechanisms, or other protective measures.
Unknown or Unusual Services and Ports Open: Unexpected open ports or services running that are not typically used or are known to be vulnerable.
Indicators of Compromise (IoCs): Presence of known malicious signatures, hashes, URLs, IP addresses, or domain names that are associated with malware or attacks.
Escalation of Privileges: Activities indicating that a user or process is attempting to gain higher-level permissions than those assigned.

Overview
This Confluence page serves as the central repository for all documentation, discussions, and updates related to our project on volatile memory analysis for cloud container nodes. Our aim is to utilize open-source tools such as AVML, dwarf2json, and Volatility 3 to provide an alternative to commercial solutions, enhancing transparency, reducing costs, and increasing flexibility.

Problem Statement
Teams currently rely on expensive commercial tools leveraging the extended Berkeley Packet Filter (eBPF) to monitor container activities. This approach incurs high costs, promotes vendor lock-in, and lacks transparency, hindering effective security audits and system customization.

Proposed Solution
Our project proposes using a combination of AVML, dwarf2json, and Volatility 3 to capture and analyze the volatile memory of cloud container nodes. This method will allow for real-time monitoring and detailed insight into container behavior, providing a robust alternative to commercial software.

Goals and Objectives
Reduce Dependency on Commercial Tools: Minimize reliance on costly commercial solutions by adopting open-source alternatives.
Enhance Security and Transparency: Improve security audits and system transparency through accessible and modifiable open-source tools.
Foster Innovation and Flexibility: Encourage innovation with flexible, adaptable solutions that can be tailored to specific organizational needs.
Implementation Steps
Environment Setup: Establish a test environment in our cloud infrastructure for safe experimentation.
Tool Integration: Integrate AVML, dwarf2json, and Volatility 3 to capture and analyze memory data.
Testing and Validation: Conduct thorough testing to ensure the tools provide accurate and valuable insights.
Documentation and Training: Document the entire process and train relevant teams on how to use the new tools effectively.
Expected Outcomes
Cost Reduction: Significant reduction in monitoring and security-related expenditures.
Improved Operational Efficiency: Faster, more flexible responses to security incidents and system anomalies.
Increased Security Posture: Enhanced ability to detect and respond to threats through detailed memory analysis.
Resources
[Link to AVML repository]
[Link to dwarf2json documentation]
[Link to Volatility 3 usage guidelines]
[Internal training sessions schedule]
FAQs
What is eBPF?
eBPF stands for extended Berkeley Packet Filter, a technology that allows for safe and efficient programs to run on the kernel level without changing kernel source code or loading kernel modules.

How does Volatility 3 help in forensic analysis?
Volatility 3 is a forensic analysis tool that provides detailed information about memory usage, helping identify suspicious activities and system anomalies.

